const channel = new MessageChannel()
const port = channel.port2

const scheduler = {
  pickTask() {

  },
  scheduleTask() {
    // 挑选一个任务并执行
    const task = pickTask()
    const continuousTask = task()

    // 如果当前任务未完成，则在下个宏任务继续执行
    if (continuousTask) {
      port.postMessage(null)
    }
  },
}

// 每次 port.postMessage() 调用就会添加一个宏任务
// 该宏任务为调用 scheduler.scheduleTask 方法
channel.port1.onmessage = scheduler.scheduleTask

// React Scheduler 使用 MessageChannel 的原因为：生成宏任务，实现：

// 将主线程还给浏览器，以便浏览器更新页面。
// 浏览器更新页面后继续执行未完成的任务。
// 为什么不使用微任务呢？

// 微任务将在页面更新前全部执行完，所以达不到「将主线程还给浏览器」的目的。
// 为什么不使用 setTimeout(fn, 0) 呢？

// 递归的 setTimeout() 调用会使调用间隔变为 4ms，导致浪费了 4ms。
// 为什么不使用 rAF() 呢？

// 如果上次任务调度不是 rAF() 触发的，将导致在当前帧更新前进行两次任务调度。
// 页面更新的时间不确定，如果浏览器间隔了 10ms 才更新页面，那么这 10ms 就浪费了。


// 1. 团队建设、基础建设。（没有见过其他团队 - 增长见识、区分辨识优秀点
// 2. 成长缓慢，支持基础业务线（如何从基础业务线中得到成长？优化开发效率？
// 3. 前端在业务方向的深入程度（产品深入较低，有分裂感，感觉只是干活，成就感较低，
// 4. 薪资绩效、业务方向、（绩效不高，比较不明确发力方向，如何发力让自己绩效薪资提升。
// 5. 业务方向较杂，（同3、单个业务深入不够，同时做多个业务方向，多个方向也做的比较浅，同时导致3、4都不好
// 6. 救火方向，（5的问题之一，救火在所难免，但是救火完成任务较麻烦，而且成就感、绩效都没有。
// 7. 技术能力提升，如何提升技术能力（业务方向？独立学习？造轮子？解决公司问题？（在没有足够的眼界的时候，方案是否是最好的，取决于个人能力，是否能达到目标
// 8. 架构、设计能力提升（通过看书？开源代码？参与/设计大型项目？

// 1. 更换平台能解决哪些问题？（1、
// 2. 如何选择合适自己的平台，确保平台能带给自己成长？或者说、自己成长的瓶颈或者突破点在哪里？目前的缺陷在哪里？
// 3. 目前的缺陷？（业务的复杂度有限；个人代码架构/设计能力有限；业务参与的深入度不够；对产品，代码的思考不够；英文较差，代码命名不好；思考深度、广度/技术深度不够(T4的原因)；思维能力、代码能力有提升空间(leetcode)
// 4. 优势（前端基础扎实(Linux、运维方向还需要深入、不算足够扎实(忘...)，JS语言有太多的奇怪特性与缺陷)；技术方向有兴趣深入；适应/学习能力较强；有一定的经验，能 cover 大部分业务场景；责任感强，能较好的完成任务，不推脱不拖延；